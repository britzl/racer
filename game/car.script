go.property("acceleration",  1200)
go.property("reverse_acceleration",  600)
go.property("breakpower", 800)
go.property("max_velocity", 1800)
go.property("max_reverse_velocity", 600)

go.property("angular_acceleration", 60)
go.property("max_angular_velocity", 20)


local camera = require "orthographic.camera"

--
-- actions
--
local ACCELERATE = hash("accelerate")
local BREAK = hash("break")
local REVERSE = hash("reverse")
local TURNLEFT = hash("turnleft")
local TURNRIGHT = hash("turnright")

--
-- messages
--
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local TRIGGER_RESPONSE = hash("trigger_response")

--
-- groups
--
local CAR = hash("car")
local OBSTACLE = hash("obstacle")
local OBJECT = hash("object")
local TRACK = hash("track")


--
-- movement and physics
--
local FORWARD = vmath.vector3(0, 1, 0)
local DRIFT = vmath.vector3(1, 0, 0)
local FRICTION = 0.02
local FRICTION_GRASS = 0.05



local GREEN = vmath.vector4(0, 1, 0, 1)


local TILESIZE = 128

function init(self)
	
	self.actions = {}
	self.velocity = 0
	self.drift = 0
	self.angular_velocity = 0
	self.on_track = true
	self.angular_drift_velocity = 0
	
	self.skidmarks = {}
	
	self.correction = vmath.vector3()
	
	msg.post("#", "acquire_input_focus")
	msg.post("#", "setup")
end

function final(self)
	while #self.skidmarks > 0 do
		go.delete(table.remove(self.skidmarks))
	end
end

local function reduce(value, amount)
	if value > 0 then
		return math.max(value - amount, 0)
	else
		return math.min(value + amount, 0)
	end
end

function update(self, dt)
	local position = go.get_position()
	local rotation = go.get_rotation()

	local tile = tilemap.get_tile("/track#tilemap", hash("track"), math.floor(0.5 + (position.x / TILESIZE)), math.floor(0.5 + (position.y / TILESIZE)))
	self.on_track = tile > 0

	
	if self.actions[ACCELERATE] then
		self.velocity = math.min(self.velocity + self.acceleration * dt, self.max_velocity)
	elseif self.actions[BREAK] then
		self.velocity = math.max(self.velocity - self.breakpower * dt, 0)
	elseif self.actions[REVERSE] then
		self.velocity = math.max(self.velocity - self.reverse_acceleration * dt, -self.max_reverse_velocity)
	end
		
	if self.on_track then
		self.velocity = reduce(self.velocity, math.abs(self.velocity * FRICTION))
	else
		self.velocity = reduce(self.velocity, math.abs(self.velocity * FRICTION_GRASS))
	end

	if self.actions[TURNLEFT] then
		self.angular_velocity = math.max(self.angular_velocity - self.angular_acceleration * dt, -self.max_angular_velocity)
	elseif self.actions[TURNRIGHT] then
		self.angular_velocity = math.min(self.angular_velocity + self.angular_acceleration * dt, self.max_angular_velocity)
	else
		self.angular_velocity = reduce(self.angular_velocity, self.angular_acceleration * 2 * dt)
	end
	
	local angular_ratio = math.abs(self.angular_velocity) / self.max_angular_velocity
	local linear_ratio = math.abs(self.velocity) / self.max_velocity
	
	self.drift = angular_ratio * linear_ratio
	
	local degrees = -self.angular_velocity * self.velocity * 0.00016
	--local degrees = -self.angular_velocity * dt
	
	if self.drift > 0.01 then
		if degrees > 0 then
			self.angular_drift_velocity = math.min(self.angular_drift_velocity + 100 * self.drift * dt, 25)
		elseif degrees < 0 then
			self.angular_drift_velocity = math.max(self.angular_drift_velocity - 100 * self.drift * dt, -25)
		end
	else
		self.angular_drift_velocity = reduce(self.angular_drift_velocity, 100 * dt)
	end

	local drift_degrees = -self.angular_drift_velocity




	label.set_text(
		"/debug#label",
		("VEL: %f\nANG.VEL: %f\nON TRACK: %s\nDRIFT: %f/%f\nDEGREES: %f\n"):format(
			self.velocity,
			self.angular_velocity,
			tostring(self.on_track),
			self.drift,
			self.angular_drift_velocity,
			degrees))


	--
	-- move and rotate
	--
	rotation = rotation * vmath.quat_rotation_z(math.rad(degrees))
	go.set_rotation(rotation)
	go.set_rotation(vmath.quat_rotation_z(math.rad(self.angular_drift_velocity)), "spritego")
	

	position = position + vmath.rotate(rotation, FORWARD) * self.velocity * dt
	
	--position = position + vmath.rotate(self.angular_drift_velocity, degrees > 0 and vmath.vector3(1, 0, 0) or vmath.vector3(-1, 0, 0)) * self.drift * 300 * dt
	go.set_position(position)
	
	
	--[[if self.drift > 0.4 then
		local id = factory.create("/factories#skidmark", position, vmath.quat_rotation_z(math.rad(degrees + drift_degrees)))
		table.insert(self.skidmarks, id)
		if #self.skidmarks > 100 then
			go.delete(table.remove(self.skidmarks, 1))
		end
	end--]]

	--
	-- debug
	--
	local sp = go.get_world_position()
	local ep = go.get_world_position() + vmath.rotate(rotation, FORWARD) * 100
	msg.post("@render:", "draw_line", { start_point = sp, end_point = ep, color = GREEN })

	local sp = go.get_world_position()
	local ep = go.get_world_position() + vmath.rotate(rotation, DRIFT) * 100 * self.drift
	msg.post("@render:", "draw_line", { start_point = sp, end_point = ep, color = GREEN })
	
	-- reset volatile state
	self.correction = vmath.vector3()
end


local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)
	self.velocity = self.velocity * 0.6
	--go.set_rotation(go.get_rotation())
end

function on_message(self, message_id, message, sender)
	--print(message_id)
	if message_id == TRIGGER_RESPONSE then
		--print("trigger", message.group, message.enter)
	elseif message_id == CONTACT_POINT_RESPONSE then
		--print(message_id, message.other_id)
		if message.group == TRACK then
			self.on_track = true
		elseif message.group == CAR then
			--print("car")
		elseif message.group == OBJECT then
			local force = message.normal * message.distance * -1000
			--print("object", force)
			msg.post(message.other_id, "apply_force", { force = force, position = go.get_position(message.other_id) })
		elseif message.group == OBSTACLE then
			--print("obstacle")
			handle_geometry_contact(self, message.normal, message.distance)
		end
	elseif message_id == hash("setup") then
		camera.follow(hash("/camera"), hash("/car/camera_anchor"), 0.3)
		camera.bounds(hash("/camera"), 0, 8000, 8000, 0)
		--camera.deadzone(hash("/camera"), 250, 250, 250, 250)
	end
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = false
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
